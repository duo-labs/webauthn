package metadata

import (
	"bytes"
	"encoding/json"
	"io"
	"net/http"
	"testing"
	"time"

	"github.com/duo-labs/webauthn/protocol/webauthncose"
	"github.com/google/uuid"
)

func downloadBytes(url string, c http.Client) ([]byte, error) {
	res, err := c.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)
	return body, err
}

func getEndpoints(c http.Client) ([]string, error) {
	jsonReq, err := json.Marshal(MDSGetEndpointsRequest{Endpoint: "https://webauthn.io"})
	if err != nil {
		return nil, err
	}

	req, err := c.Post("https://mds3.certinfra.fidoalliance.org/getEndpoints", "application/json", bytes.NewBuffer(jsonReq))
	if err != nil {
		return nil, err
	}

	defer req.Body.Close()
	body, _ := io.ReadAll(req.Body)

	var resp MDSGetEndpointsResponse

	err = json.Unmarshal(body, &resp)
	if err != nil {
		return nil, err
	}
	return resp.Result, err
}

func getTestMetadata(s string, c http.Client) (MetadataStatement, error) {
	var statement MetadataStatement

	// MDSGetEndpointsRequest is the request sent to the conformance metadata getEndpoints endpoint
	type MDSGetTestMetadata struct {
		// The URL of the local server endpoint, e.g. https://webauthn.io/
		Endpoint string `json:"endpoint"`
		TestCase string `json:"testcase"`
	}

	jsonReq, err := json.Marshal(MDSGetTestMetadata{Endpoint: "https://webauthn.io", TestCase: s})
	if err != nil {
		return statement, err
	}

	req, err := c.Post("https://mds3.certinfra.fidoalliance.org/getTestMetadata", "application/json", bytes.NewBuffer(jsonReq))
	if err != nil {
		return statement, err
	}

	defer req.Body.Close()
	body, err := io.ReadAll(req.Body)
	if err != nil {
		return statement, err
	}

	type ConformanceResponse struct {
		Status string            `json:"status"`
		Result MetadataStatement `json:"result"`
	}

	var resp ConformanceResponse
	err = json.Unmarshal(body, &resp)
	if err != nil {
		return statement, err
	}

	statement = resp.Result
	return statement, err
}

func TestProductionMetadataTOCParsing(t *testing.T) {
	httpClient := &http.Client{
		Timeout: time.Second * 30,
	}
	bytes, err := downloadBytes("https://mds.fidoalliance.org/", *httpClient)
	if err != nil {
		t.Fatal(err)
	}
	_, err = unmarshalMDSBLOB(bytes, *httpClient)
	if err != nil {
		t.Fail()
	}
}

func TestConformanceMetadataTOCParsing(t *testing.T) {
	MDSRoot = ConformanceMDSRoot
	Conformance = true
	httpClient := &http.Client{
		Timeout: time.Second * 30,
	}

	tests := []struct {
		name string
		pass bool
	}{
		{
			"fido2_good",
			true,
		},
		{
			"fido2_badReports",
			false,
		},
		{
			"fido2_badSignature",
			false,
		},
		{
			"fido2_badCertificateChain",
			false,
		},
		{
			"fido2_intermediateCertificateRevoked",
			false,
		},
		{
			"fido2_subjectCertificateRevoked",
			false,
		},
	}

	endpoints, err := getEndpoints(*httpClient)
	if err != nil {
		t.Fatal(err)
	}

	for _, endpoint := range endpoints {
		bytes, err := downloadBytes(endpoint, *httpClient)
		if err != nil {
			t.Fatal(err)
		}

		blob, err := unmarshalMDSBLOB(bytes, *httpClient)
		if err != nil {
			if me, ok := err.(*MetadataError); ok {
				t.Log(me.Details)
			}
		}
		for _, entry := range blob.Entries {
			aaguid, _ := uuid.Parse(entry.AaGUID)
			Metadata[aaguid] = entry
		}
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			statement, err := getTestMetadata(tt.name, *httpClient)
			if err != nil {
				t.Fatal(err)
			}
			aaguid, _ := uuid.Parse(statement.AaGUID)
			if meta, ok := Metadata[aaguid]; ok {
				if tt.pass {
					t.Logf("Found aaguid %s in test metadata", meta.AaGUID)
				} else {
					if IsUndesiredAuthenticatorStatus(AuthenticatorStatus(meta.StatusReports[0].Status)) {
						t.Logf("Found authenticator %s with bad status in test metadata, %s", meta.AaGUID, meta.StatusReports[0].Status)
					} else {
						t.Fail()
					}
				}
			} else {
				if !tt.pass {
					t.Logf("Metadata for aaguid %s not found in test metadata", statement.AaGUID)
				} else {
					t.Fail()
				}
			}
		})
	}
}

const (
	exampleMetadataBLOB = "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlDWlRDQ0FndWdBd0lCQWdJQkFUQUtCZ2dxaGtqT1BRUURBakNCb3pFbk1DVUdBMVVFQXd3ZVJWaEJUVkJNUlNCTlJGTXpJRlJGVTFRZ1NVNVVSVkpOUlVSSlFWUkZNU0l3SUFZSktvWklodmNOQVFrQkZoTmxlR0Z0Y0d4bFFHVjRZVzF3YkdVdVkyOXRNUlF3RWdZRFZRUUtEQXRGZUdGdGNHeGxJRTlTUnpFUU1BNEdBMVVFQ3d3SFJYaGhiWEJzWlRFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ01BazFaTVJJd0VBWURWUVFIREFsWFlXdGxabWxsYkdRd0hoY05NakV3TkRFNU1URXpOVEEzV2hjTk16RXdOREUzTVRFek5UQTNXakNCcFRFcE1DY0dBMVVFQXd3Z1JWaEJUVkJNUlNCTlJGTXpJRk5KUjA1SlRrY2dRMFZTVkVsR1NVTkJWRVV4SWpBZ0Jna3Foa2lHOXcwQkNRRVdFMlY0WVcxd2JHVkFaWGhoYlhCc1pTNWpiMjB4RkRBU0JnTlZCQW9NQzBWNFlXMXdiR1VnVDFKSE1SQXdEZ1lEVlFRTERBZEZlR0Z0Y0d4bE1Rc3dDUVlEVlFRR0V3SlZVekVMTUFrR0ExVUVDQXdDVFZreEVqQVFCZ05WQkFjTUNWZGhhMlZtYVdWc1pEQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJOUUpzNndUcWl4YytTK1ZEQWFqRmxQTmF0MTBLRVdKRTVqY1dPdm02cXBPOVNEQUFNWnZiNEhIcnZzK1A1WVJwSHJTbFVQZHZLK3VFUWJkV2czMVA5dWpMREFxTUFrR0ExVWRFd1FDTUFBd0hRWURWUjBPQkJZRUZMcXNhcGNYVjRab1ZIQW5ScFBad1FlN1l5MjBNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUM2N3phOEVJdXlSaUtnTkRYSVAxczFhTHIzanpIOVdWWGZIeDRiSit6Q3NnSWdHL3RWQnV0T0pVVSt2dm9ISW8vb3RBVUFjSDViTkhQM3VJemlEUytQVFVjPSIsIk1JSUVIekNDQWdlZ0F3SUJBZ0lCQWpBTkJna3Foa2lHOXcwQkFRc0ZBRENCbXpFZk1CMEdBMVVFQXd3V1JWaEJUVkJNUlNCTlJGTXpJRlJGVTFRZ1VrOVBWREVpTUNBR0NTcUdTSWIzRFFFSkFSWVRaWGhoYlhCc1pVQmxlR0Z0Y0d4bExtTnZiVEVVTUJJR0ExVUVDZ3dMUlhoaGJYQnNaU0JQVWtjeEVEQU9CZ05WQkFzTUIwVjRZVzF3YkdVeEN6QUpCZ05WQkFZVEFsVlRNUXN3Q1FZRFZRUUlEQUpOV1RFU01CQUdBMVVFQnd3SlYyRnJaV1pwWld4a01CNFhEVEl4TURReE9URXhNelV3TjFvWERUUTRNRGt3TkRFeE16VXdOMW93Z2FNeEp6QWxCZ05WQkFNTUhrVllRVTFRVEVVZ1RVUlRNeUJVUlZOVUlFbE9WRVZTVFVWRVNVRlVSVEVpTUNBR0NTcUdTSWIzRFFFSkFSWVRaWGhoYlhCc1pVQmxlR0Z0Y0d4bExtTnZiVEVVTUJJR0ExVUVDZ3dMUlhoaGJYQnNaU0JQVWtjeEVEQU9CZ05WQkFzTUIwVjRZVzF3YkdVeEN6QUpCZ05WQkFZVEFsVlRNUXN3Q1FZRFZRUUlEQUpOV1RFU01CQUdBMVVFQnd3SlYyRnJaV1pwWld4a01Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU5HdW1CYlluRlFuVGpQMVJTZmM3MGhzaGdiaUkxWnRwd1E1bjZ4UkxBL1dxMFBTQ2ZMbDVxUStyN2RsY0sxZDNyM3ZMYSt2bTZHNnZLSEdDUEVlVXpxTXZNQzB3REFZRFZSMFRCQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVOazZGNFJKbkdHVkZlKzAvY2Jad2ZyWmQ3WlV3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUNucDFmbTBGS2xXbVV0VHBsTHVZZzdtcHM0eFAvQ091OGRuYjM4dTFuTURWdU9UNCtDWmFpTTlBR3ozMTNHRDIyaGpMR3JtUHVZbjg2d0dPS0kzSE9yRXBzR2RNbWZ5N3RUbUtYL2VNL2VTM0ZFRFhabkU4MlBuNW9GSXlCVC9mOHNHdVh5T3NGWnFXQnZWZEJJSURsZENwRDRteE1RWlpPWnRUcmx2M1d2QlFNQy9kc2ljT3hlM1FLWHZXSGk2UWIvUmh1YWlwM3JQbXdNZis0SnBuSk8rSk1QcUFhVTFjQUg4SFZzZnJMQU1vS3MxNDhqMitjdmJwYVdtc1Q1cklvSC9lelZyUGFHL01PaUlncTc5dy9lZnV2U2k1QVg4SitrRG9MU0VmM2Q1d09na0pZQXFVcWNSeFhURUV0S0l6RE02aHphQlFGaUFXdlRuOUlsVldnbnRRYW1TWHZIK3R4YVRGOWlFbEh4VWY1SU5ZRlZjaUNwenRTcnlkZUh2L09DTlJmNy9MVnJpY01TbG84UmgrTzN5UDlWKzJ1TmYzWDhzUUpOdHVmclFOYXFxMTh3aVhsaVRMdWZTbjAyL2crbWtoSVVpTktmVE9KcHZDaktlQ25DRmN4UVUyL1hUM0toM0c4Z0RKd3NPNkVWUmpNVUp0NEFZS3plL2hFVUN3RjU1SUYybTNqSElvQ3U4alZmajI0Q2VFWDVkbmZ2U3IrU1Z2TjVRQjB1WjA1TTRybXlaWHlxQm0wekszZlIraUUwL1pwSW51d0xDN1grVzgyelhsbk1rcGxJM1ErSnhkN2pmUTE1U1lORTJLNnJ2UklUMDF3MFA5WnF5REY3a25HS3BSbHA3T3F4ZDM3YkQvVlViV3BRN2dJQWZzSk5INUtCTG93SEpGRmpXIl19.._tmf5mXw0RPlK3RgYlMqmtog9wsHjY-BjHGSZrrDhTrFwHj-g5CiG-AXgNnHLUHEm2_2DOJonEte7PbJEkeLeA"
)

func TestExampleMetadataTOCParsing(t *testing.T) {
	MDSRoot = ExampleMDSRoot
	httpClient := &http.Client{
		Timeout: time.Second * 30,
	}
	exampleMetadataBLOBBytes := bytes.NewBufferString(exampleMetadataBLOB)
	_, err := unmarshalMDSBLOB(exampleMetadataBLOBBytes.Bytes(), *httpClient)
	if err != nil {
		t.Fail()
	}
}

func TestIsUndesiredAuthenticatorStatus(t *testing.T) {
	tests := []struct {
		status AuthenticatorStatus
		fail   bool
	}{
		{
			NotFidoCertified,
			false,
		},
		{
			FidoCertified,
			false,
		},
		{
			UserVerificationBypass,
			true,
		},
		{
			AttestationKeyCompromise,
			true,
		},
		{
			UserKeyRemoteCompromise,
			true,
		},
		{
			UserKeyPhysicalCompromise,
			true,
		},
		{
			UpdateAvailable,
			false,
		},
		{
			Revoked,
			true,
		},
		{
			SelfAssertionSubmitted,
			false,
		},
		{
			FidoCertifiedL1,
			false,
		},
		{
			FidoCertifiedL1plus,
			false,
		},
		{
			FidoCertifiedL2,
			false,
		},
		{
			FidoCertifiedL2plus,
			false,
		},
		{
			FidoCertifiedL3,
			false,
		},
		{
			FidoCertifiedL3plus,
			false,
		},
	}

	for _, tt := range tests {
		t.Run(string(tt.status), func(t *testing.T) {
			if tt.fail != IsUndesiredAuthenticatorStatus(tt.status) {
				t.Fail()
			}
		})
	}
}

func TestAlgKeyMatch(t *testing.T) {
	tests := []struct {
		name string
		alg  algKeyCose
		algs []AuthenticationAlgorithm
		fail bool
	}{
		{
			"Positive match RS256",
			algKeyCose{KeyType: webauthncose.RSAKey, Algorithm: webauthncose.AlgRS256},
			[]AuthenticationAlgorithm{ALG_SIGN_RSASSA_PKCSV15_SHA256_RAW},
			true,
		},
		{
			"Positive match ES256",
			algKeyCose{KeyType: webauthncose.EllipticKey, Algorithm: webauthncose.AlgES256, Curve: webauthncose.P256},
			[]AuthenticationAlgorithm{ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW, ALG_SIGN_SECP256R1_ECDSA_SHA256_DER},
			true,
		},
		{
			"Positive match Ed25519",
			algKeyCose{KeyType: webauthncose.OctetKey, Algorithm: webauthncose.AlgEdDSA, Curve: webauthncose.Ed25519},
			[]AuthenticationAlgorithm{ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW, ALG_SIGN_ED25519_EDDSA_SHA512_RAW},
			true,
		},
		{
			"Negative match Ed25519, array missing Ed25519",
			algKeyCose{KeyType: webauthncose.OctetKey, Algorithm: webauthncose.AlgEdDSA, Curve: webauthncose.Ed25519},
			[]AuthenticationAlgorithm{ALG_SIGN_RSASSA_PKCSV15_SHA256_RAW, ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW, ALG_SIGN_SECP256R1_ECDSA_SHA256_DER},
			false,
		},
		{
			"Negative match RS256, array missing RS256",
			algKeyCose{KeyType: webauthncose.RSAKey, Algorithm: webauthncose.AlgRS256},
			[]AuthenticationAlgorithm{ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW, ALG_SIGN_SECP256R1_ECDSA_SHA256_DER, ALG_SIGN_ED25519_EDDSA_SHA512_RAW},
			false,
		},
		{
			"Negative match ES256, array missing ES256",
			algKeyCose{KeyType: webauthncose.EllipticKey, Algorithm: webauthncose.AlgES256},
			[]AuthenticationAlgorithm{ALG_SIGN_RSASSA_PKCSV15_SHA256_RAW, ALG_SIGN_ED25519_EDDSA_SHA512_RAW},
			false,
		},
		{
			"Negative match, curve/alg mismatch",
			algKeyCose{KeyType: webauthncose.EllipticKey, Algorithm: webauthncose.AlgES256, Curve: webauthncose.P384},
			[]AuthenticationAlgorithm{ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW, ALG_SIGN_SECP256R1_ECDSA_SHA256_DER, ALG_SIGN_SECP384R1_ECDSA_SHA384_RAW},
			false,
		},
		{
			"Negative match, kty/crv mismatch",
			algKeyCose{KeyType: webauthncose.RSAKey, Algorithm: webauthncose.AlgRS256, Curve: webauthncose.P256},
			[]AuthenticationAlgorithm{ALG_SIGN_SECP256R1_ECDSA_SHA256_RAW, ALG_SIGN_SECP256R1_ECDSA_SHA256_DER, ALG_SIGN_SECP384R1_ECDSA_SHA384_RAW},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(string(tt.name), func(t *testing.T) {
			if tt.fail != AlgKeyMatch(tt.alg, tt.algs) {
				t.Fail()
			}
		})
	}
}
